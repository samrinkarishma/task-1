task 4
 1.What are the four access modifiers available in java and what is their significance in terms of class, methods,
and variable accessibility?

There are two types of modifiers in Java: access modifiers and non-access modifiers.

The access modifiers in Java specifies the accessibility or scope of a  method, variables, or class. 
We can change the access level of variables, methods, and class by applying the access modifier on it.


There are four types of Java access modifiers:

Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. 
If you do not specify any access level, it will be the default.
Protected: The access level of a protected modifier is within the packa
ge and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
Public: The access level of a public modifier is everywhere. It can be accessed from within the class,
outside the class, within the package and outside the package.

Modifier	Class	Package	Sub class	other package
Public	      y	  y	     y	       y
Protected	     y	y	     y         	n
Default	     y	  y    	n         	n
Private	    y	    n	   n	          n


2. what is the difference between exception and error?
   Both exceptions and errors are the subclasses of a throwable class. The error implies a problem that mostly arises due to the shortage of system resources. On the other hand, 
the exceptions occur during runtime and compile time. Let’s find out some major differences between exceptions and errors.

S.No	             Errors	                                                          Exceptions
1.	The error indicates trouble that primarily
       occurs due to the Shortage of system resources.	        The exceptions are the issues that can appear at runtime 
                                                                and compile time.

2.	It is not possible to recover from an error. 	        It is possible to recover from an exception.

3.	In java, all the errors are unchecked                   In java, the exceptions can be both checked and unchecked.

4.	The system in which the program is running is 
        responsible for errors.	                                The code of the program is accountable for exceptions.

5.	They are described in the java.lang.Error package.	They are described in java.lang.Exception package


3. What is the difference between checked and unchecked exception?


Checked Exception:

1.They occur at compile time.

2.The compiler checks for a checked exception.

3.These exceptions can be handled at the compilation time.

4.It is a sub-class of the exception class.

5.The JVM requires that the exception be caught and handled.

6.Example of Checked exception- ‘File Not Found Exception’

Unchecked Exception:

1.These exceptions occur at runtime.

2.The compiler doesn’t check for these kinds of exceptions.

3.These kinds of exceptions can’t be caught or handled during compilation time.

4.This is because the exceptions are generated due to the mistakes in the program.

5.These are not a part of the ‘Exception’ class since they are runtime exceptions.

6.Example of Unchecked Exceptions- ‘No Such Element Exception’


4.Write a java program that reads user input for 2 integer and perform division.
handle the exception is thrown when the second number is 0 display error message to user.

package exception;
import java.util.Scanner;

public class Exception1 {

	public static void main(String[] args) {
		try
		{
			
			int a,b,c;
			Scanner sc=new Scanner(System.in);
			
			// input numbers here.
			System.out.print("Enter first number : ");
			a=sc.nextInt();
       
			System.out.print("Enter second number : ");
			b=sc.nextInt();
       
			//throw to catch
			c=a/b;
			System.out.println("Result:"+c);
		}
		catch(ArithmeticException e)
		{
			System.out.println("Error:"+e.getMessage());
			System.out.println("Error:"+e);
		}
		// here program ends.
		System.out.println("End of Program...");
	}

	}


output:
Enter first number : 1
Enter second number : 0
Error:/ by zero
Error:java.lang.ArithmeticException: / by zero
End of Program...


5.write a code of arrayindexoutofboundexception and stringindexoutofboundexception
package exception;


public class Arrayindexoutofboundexception {

	public static void main(String[] args) {
		String[] arr = {"Rohit","Shikar","Virat","Dhoni"};   
		//Declaring elements in the array                                       
		          
		       for(int i=0;i<=arr.length;i++) {       
		  
		// no element 
		             System.out.println(arr[i]);      
		      
		        }  
		  
		    }  
	}
output:
Rohit
Shikar
Virat
Dhoni
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds 

package exception;

public class Stringindexoutofboundexception {

	public static void main(String[] args) {
		 String s = "example";  
	        String substring = s.substring(2, 8);  

	}
}

output:

Exception in thread "main" java.lang.StringIndexOutOfBoundsException: begin 2, end 8, length 7

6.you are building a login system for a website in java. if the user enters an incorrect password you want to 
display message of the error .how you use exception handling in java.

package exception;

import java.util.Scanner;

public class Exceptionavoid {

	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);

	    String entryUsername;
	    String username1 = "maya";
	    String username2 = "nalini";
	    String username3 = "yas";

	    int entryPassword;
	    int password1 = 7104;
	    int password2 = 7116;
	    int password3 = 7020;

	    System.out.println("Enter Username: ");
	    entryUsername = input.next();

	    System.out.println("Enter Password: ");
	    entryPassword = input.nextInt();

	    while ( !(entryUsername.equals(username1)) || !
	             (entryUsername.equals(username2)) || !
	             (entryUsername.equals(username3)) 
	             && (entryPassword == password1) || (entryPassword == password2) || (entryPassword == password3) ) {
	        System.out.println("Incorrect Username or Password");
	        System.out.println("Enter Username: ");
	        entryUsername = input.next();

	        System.out.println("Enter Password: ");
	        entryPassword = input.nextInt();
	    }


	}

}

output:
Enter Username: 
maya
Enter Password: 

7104
Incorrect Username or Password

7.Create a custom exception java called "invalidageexception" that is thrown when the user enter age less than
18. Implementation exception handling in a java program to catch the error message.

package exception;
import java.util.Scanner;

public class Invalidageexception {
	
	private int age;
    private String name;
    private int salary;

    public int getAge() {
        return age;
    }
    public void setAge(int age) {

        if ( age < 0 && age >= 120) 

            this.age = age;
        throw new IllegalArgumentException (" age can not be negative or more than 120");

//getters and setter
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
	

public static void main(String[] args) {
    Invalidageexception emp = new Invalidageexception();

    emp.setAge(220);
    emp.setName("None");

    System.out.println( "age : " + emp.getAge());
    System.out.println( "name : " + emp.getName());
}
public int getSalary() {
	return salary;
}
public void setSalary(int salary) {
	this.salary = salary;
}
}


output:
Exception in thread "main" java.lang.IllegalArgumentException:  age can not be negative or more than 120
	at palindrome/exception.Invalidageexception.setAge(Invalidageexception.java:18)
	at palindrome/exception.Invalidageexception.main(Invalidageexception.java:34)

8.Implement exception handling in a java program that reads data from a file .if the file does not exist
throw a filenotfoundexception and display error message to the user.

package exception;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Fileread {
	public static void readFile(String fileName) throws FileNotFoundException {
		File file = new File(fileName);
	    Scanner scanner = new Scanner(file);

	    // Read and process the contents of the file
	    while (scanner.hasNextLine()) {
	      String line = scanner.nextLine();
	      System.out.println(line);
	    }

	    scanner.close();
	}

	public static void main(String[] args) {
		
		try {
		      readFile("test1.txt");
		    } catch (FileNotFoundException e) {
		      System.out.println("Error: " + e.getMessage());
		    }
	

}
}

output:
Error: test1.txt (The system cannot find the file specified)
